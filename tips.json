{"BeautifulSoup - extracting names": "\nfrom bs4 import BeautifulSoup\nimport requests\nimport pandas as pd\n\n# Walmart - 403 responce\n# Aurrera - 403 responce\n# mercadolibre - 200 Ok\n\n\nurl = 'https://listado.mercadolibre.com.mx/lenovo-laptop#D[A:lenovo%20laptop]'\npage = requests.get(url)\nprint(page)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nfile_object = open(\"textpage.txt\",\"w+\")\ntitles = soup.find_all('h2',class_='ui-search-item__title')\nprices = soup.find_all('span',class_='price-tag-fraction')\npricelist = []\ngate = False\ncount = 1\nfor i,val in enumerate(prices):# cada elemento extraido del sitio\n    # 2, 5, 8, 11\n    # f(x) = a*b + 2\n    # f(x) = 3*b - 1\n    print(i,3*count-2,val)\n    if i == 3*count - 2:\n        pricelist.append(val)\n        count += 1\n        \n            \n##print(pricelist)\n\ndf1 = pd.DataFrame({'Nombre':titles})\ndf2 = pd.DataFrame({'precio':prices})\nprint(df1)\nprint(df2)\n", "CSV - extraer informacion de file.csv": "\n    # ------.CSV_FILES-----------------------------------------------------------------------------\n    # Lista para almacenar los datos\n    datos_eq_ant = []\n    nombres = []\n    archivo_csv = 'antoine.csv'\n\n    # Abrir el archivo CSV y leer su contenido\n    with open(archivo_csv, 'r', newline='', encoding='utf-8') as archivo:\n        # Crear un lector CSV\n        lector = csv.DictReader(archivo)\n\n        # Iterar sobre las filas del archivo y agregar a la lista\n        for fila in lector:\n            nombres.append(fila['Compound Name'])\n            datos_eq_ant.append(dict(fila))\n    print(nombres)\n", "Matplotlib - adding multiple curves to one plot": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Generar datos de ejemplo\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Crear el gr\u00e1fico y agregar las l\u00edneas\nplt.plot(x, y1, label='sin(x)')\nplt.plot(x, y2, label='cos(x)')\nplt.plot(x, y3, label='tan(x)')\n\n# Configurar el gr\u00e1fico (etiquetas, leyenda, etc.)\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Funciones trigonom\u00e9tricas')\nplt.legend()\n\n# Mostrar el gr\u00e1fico\nplt.show()", "PIL - detecting text from an image": "from PIL import Image\nfrom pytesseract import pytesseract\npath_to_tes = r'C:/Program Files/Tesseract-OCR/tesseract.exe'\npath_to_image = r'C:/Users/Fer/AppData/Local/Programs/Python/Python310/los_codigos/Lector de codigos python/img1.png'\n\npytesseract.tesseract_cmd = path_to_tes\nimg = Image.open(path_to_image)\ntext = pytesseract.image_to_string(img)\nprint(text)\n", "PyQt5 - plantilla basica": "\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtGui import *\n\nclass MainApp(QMainWindow):\n    def __init__(self, parent=None,*args):\n        super(MainApp, self).__init__(parent=parent)\n\n##        self.setMinimumSize(500,300)\n##        self.setMaximumSize(700,500)\n        self.setFixedSize(500,300)\n        self.setWindowTitle(\"Primera App\")\n\n        width = self.frameGeometry().width()\n        height = self.frameGeometry().height()\n\n        label = QLabel(\"Primer Label\", self)\n##        label.setGeometry(0,0,width,height)\n        label.setStyleSheet(\"background:#424242;, color:#fff\")\n        label.setAlignment(Qt.AlignCenter)\n        self.setCentralWidget(label)\n\nif __name__ == '__main__':\n    app = QApplication([])\n    window = MainApp()\n    window.show()\n    app.exec_()\n", "Set() - .union(),.list()": "R1 = [['A','B','C','D'],['1','1','1','1'],['R','R','P','P']]# 2d LISTS\nR2 = [['C','B','E','D'],['1','1','1','1'],['R','R','P','P']]\n\nset1 = set(R1[0][:])\nset2 = set(R2[0][:])\nset3 = set1.union(set2)\nRT = list(set3)\nRT = sorted(RT)\n", "collections - Counter (list to dict, frequency)": "\nimport re\nfrom collections import Counter\na = ['hola','laho','lada','folala','hola','laho','folala','folala']\na_counted = Counter(a)\nprint(a_counted)\na_sd = set(a)\nprint(a_sd)\na_sdl = list(a_sd)\nfor i,j in enumerate(a_sdl):\n    x = len(re.findall('la',j))\n    print(x)\n\n", "dict - como agregar un elemento a un diccionario": "\n    # Crear un programa sobre un treeview\n    Programa = {'root': {\n        \"propiedades\":{\n            \"titulo\":\"Taller de Fernando\",\n            \"color\":\"#ffffff\",\n            \"active\":True\n            },\n        \"Frame 1\":{\n            \"propiedades\":{\n                \"padre\":\"root\",\n                \"row\":0,\n                \"column\":0,\n                \"color\":\"#000000\"\n                },\n            \"Frame 1.1\":{\n                \"propiedades\":{\n                    \"padre\":\"root\",\n                    \"row\":0,\n                    \"column\":0,\n                    \"color\":\"#000000\"\n                    }\n                }\n            }\n        }\n    }\n    print(Programa)\n    Programa['root'][\"Frame 1\"][\"Frame 1.2\"] = {\n                \"propiedades\":{\n                    \"padre\":\"root\",\n                    \"row\":0,\n                    \"column\":0,\n                    \"color\":\"#000000\"\n                    }}\n", "dict - using dict to index list": "\nm = [[] for i in range(5)]\nprint(m)\nnombres = {'a':1,'b':2,'c':3}\n\n\ntext_document = 'bca'\nfor i, letra in enumerate(text_document):\n    print(m[nombres[letra]])\n    m[nombres[letra]].append(letra)\n\nfor i,lista in enumerate(m):\n    print(i,lista)\nprint(m)\n", "dict.items() - key value returned as tuple ('KEY', 'VALUE')": "\n# para una Lista de tk.booleanVar()\n# Paso4) creamos una lista\nseleccion = []\n# Paso 5) iteramos a traves de un diccionario\nfor opcion, valor in chopciones.items():\n    if valor.get():\n        seleccion.append(opcion)\n", "filedialog - cuadro de di\u00e1logo para seleccionar archivo": "\n        def seleccionar_archivo():\n    # Mostrar el cuadro de di\u00e1logo para seleccionar archivo\n    archivo = filedialog.askopenfilename(title=\"Seleccionar Archivo\", filetypes=[(\"Archivos de texto\", \"*.txt\"), (\"Todos los archivos\", \"*.*\")])\n\n    # Imprimir la ruta del archivo seleccionado\n    print(\"Archivo seleccionado:\", archivo)\n", "filedialog - seleccionar imagen": "def seleccionar_imagen():# Func-2: Pide al usuario la ruta de una imagen: INCCOMPLETO\n    ruta_imagen = filedialog.askopenfilename(filetypes=[(\"Archivos de imagen\", \"*.png;*.jpg;*.jpeg;*.gif\")])\n    if ruta_imagen:\n        # Guardar la ruta de la imagen en un archivo JSON\n        guardar_ruta_en_json(ruta_imagen)\n\n        # Mostrar la imagen en la ventana\n        mostrar_imagen(ruta_imagen)\n", "json - Crear un archivo json en python": "import json\n\n# Datos a guardar en el archivo JSON\ndatos = {\n    \"nombre\": \"Ejemplo\",\n    \"edad\": 25,\n    \"ciudad\": \"Ejemplolandia\"\n}\n\n# Nombre del archivo donde se guardar\u00e1 el JSON\nnombre_archivo = \"ejemplo.json\"\n\n# Escribir datos en el archivo JSON\nwith open(nombre_archivo, 'w') as archivo:\n    json.dump(datos, archivo)\n\nprint(f\"Archivo JSON '{nombre_archivo}' creado exitosamente.\")\n", "json - cargar dict de json": "\nimport json\n\n# Nombre del archivo JSON\nnombre_archivo = 'mi_archivo.json'\n\n# Cargar el diccionario desde el archivo JSON\nwith open(nombre_archivo, 'r') as archivo:\n    diccionario_cargado = json.load(archivo)\n\nprint(\"Diccionario cargado:\")\nprint(diccionario_cargado)\n\n", "json - insertar dict en archivo json": "\nimport json\n\n# Tu diccionario\nmi_diccionario = {'nombre': 'Juan', 'edad': 25, 'ciudad': 'Ejemplo'}\n\n# Nombre del archivo donde se guardar\u00e1 el diccionario JSON\nnombre_archivo = 'mi_archivo.json'\n\n# Guardar el diccionario en el archivo JSON\nwith open(nombre_archivo, 'w') as archivo:\n    json.dump(mi_diccionario, archivo)\n\nprint(f\"El diccionario se ha guardado en '{nombre_archivo}'.\")\n", "math - sine & cosine examples": "import math\nsegundero = 100\na = math.cos(segundero)\nb = math.sin(segundero)\n", "numpy - array(), zeros() & matrix()": "\nimport numpy as np\n\nPMlist_R2 = np.array([45.5, 71, 86, 31.5])\nconversion_line =  np.zeros((len(coefficients)))\nprojection_matrix = np.matrix([\n            [1,0,0],\n            [0,1,0]])\n", "open() - opening .txt ": "# Se inicializa el archivo\nabrirmuestra = open(f'prueba4.txt','r')\n# se usa un metodo llamado read y se transforma a str\nmuestra = str(abrirmuestra.read())\nprint(muestra)\n", "pandas - basic dataframe manipulation": "\nimport pygame, sys\nimport numpy as np\nimport math\nimport csv\nimport pandas as pd\n\n# ABRIR EL ARCHIVO .CSV\nwith open(\"Concrete_Data_Yeh.csv\") as datafile:\n    data = pd.read_csv(datafile)\n\n# SE MUESTRA LA INFORMACI\u00d3N\nprint(data)\n# SE MUESTRA EL TAMA\u00d1O DE LOS DATOS\nprint(f'DATA.SIZE : {data.size}')\n# SE MUESTRA LOS ENCABEZADOS DE LA TABLA\nprint(f'DATA.HEAD : {data.head()}')\n# haremos un extractor de columnas\n\n# extraemos 3 variables/ columnas\nvarnum3 = data[[\"cement\",\"slag\",\"flyash\"]]\ncol1 = data[[\"cement\"]]\ncol2 = data[[\"slag\"]]\ncol = data[[\"flyash\"]]\nprint(\"___________________________________\")\nprint(varnum3)\nprint(type(varnum3))\nprint(\"___________________________________\")\ntabla = varnum3.to_numpy()\ncol = col.to_numpy()\ncol1 = col1.to_numpy()\ncol2 = col2.to_numpy()\nprint(tabla)\n\n### no modificar\n##print(max(col))\n##print(min(col))\nd = max(col)-min(col)\nfor i in range(len(col)):\n    tabla[i,2] = int((tabla[i,2]/d)*255)\n    tabla[i,0] = tabla[i,0] - min(tabla[:,0])\n    tabla[i,1] = tabla[i,1] - min(tabla[:,1])\nprint(tabla)\nprint(\"___________________________________\")\nfirst = col1[0:(len(col1)-1),:]\nsecond = col1[1:(len(col1)),:]\nthird = col2[0:(len(col2)-1),:]\nfourth = col2[1:(len(col2)),:]\nprint((first))\nprint(second)\nprint(third)\nprint(fourth)\n", "pyautogui - moving mouse": "import pyautogui as pag\nimport random\nimport time\n\nwhile True:\n    x = random.randint(600,700)\n    y = random.randint(200,600)\n    pag.moveTo(x,y,0.5)\n    time.sleep(2)\n", "pyautogui - screenshot": "import pyautogui\nimport tkinter as tk\nfrom tkinter.filedialog import *\n\nroot = tk.Tk()\n\ncanvas1 = tk.Canvas(root, width = 300, height=300)\ncanvas1.pack()\n\ndef take_screenshot():\n    myScreenshot = pyautogui.screenshot()\n    save_path = asksaveasfilename()\n    myScreenshot.save(save_path+'_screenshot.png')\nmyButton = tk.Button(text=\"Take SS\",command=take_screenshot,font=10)\ncanvas1.create_window(150,150,window=myButton)\n\nroot.mainloop()\n", "pygame - Mac_sprites original code": "import pygame\nimport numpy as np\nfrom math import *\nfrom ysort import Camera_group\n\nprojection_matrix = np.matrix([\n    [1,0,0],\n    [0,1,0]])\nclass Sendtransformedcoordinates():\n    def __init__(self):\n        self.memory = []\n    def add(self,point):\n        self.memory.append(point)\n    def returnback(self):\n        return self.memory\n    def clear(self):\n        self.memory = []\n\nconexion = Sendtransformedcoordinates()\n\n# ---------------------------------------------------------------        \n##XXXX COPY THIS TO IMPORT THE FUNCTION OF ADDING SEVERAL IMAGES\n#-----------------------------------------------------------------\n# titlespos is  the collections of all 3d positions\n# who_list is the collection of all the names of each position\n# Creas un sprite group recuerdalo\ndef addimages(group,titlespos,who_list,scale,cubepos,rotation_x, rotation_y, rotation_z):# FUNCION TIPO CREATE\n##    images = pygame.sprite.Group()# hERE IT CREATES THE SPRITE\n    machines = []\n    conexion.clear()\n    for i,j in enumerate(titlespos):# TRANSFORMS THE  3D COORDINATE VECTOR INTO 2D PROJECTED VECTOR\n        title2d = np.dot(rotation_z, titlespos[i].reshape((3,1)))\n        title2d = np.dot(rotation_y, title2d)\n        title2d = np.dot(rotation_x, title2d)\n        \n        conexion.add(title2d)\n        title = np.dot(projection_matrix, title2d)\n        x = int(title[0][0] * scale) + cubepos[0]\n        y = int(title[1][0] * scale) + cubepos[1]\n        \n        machines.append(Machines(group,x,y,who_list[i],scale,i,title2d))# THEN WE FINALLY ADD TO THE SPRITE GROUP OBJECT CALLED images\n        # A CLASS OBJECT FROM Mac CLASS, SO NOW THE OBJECT WITH THE POSITION, THE IMAGE  THE SCALE AND ITS ID ARE LOADED INTO THE SPRITE GROUP OBJECT\n        # SO NOW, EVERY MAC OBJECTT STORED IN IMAGES CAN BE DISPLAYED ONTO THE SCREEN\n    return machines\n\n# HOT NEW\nclass Machines(pygame.sprite.Sprite):\n    def __init__(self,group,xpos,ypos,who,scale,id,title2d):\n        super().__init__(group)\n        self.who = who# who is a number string, always it most be a string\n        # bc off the line of code below, it references to the name of the image\n        # you want to use\n        if self.who == \"None\":\n            self.image = pygame.image.load(\"images/button.png\").convert_alpha()\n        else:\n            self.image = pygame.image.load(\"images/\"+self.who+\".png\").convert_alpha()\n        self.image = pygame.transform.scale(self.image,(scale,scale))\n        if self.who == \"11\":\n            self.image = pygame.transform.scale(self.image,(2*scale,scale))\n        self.rect =self.image.get_rect(center =(xpos, ypos))\n        self.direction = pygame.math.Vector2()\n        self.direction.y = ypos\n        self.direction.x = xpos\n        self.transformx = title2d[0]\n        self.transformy = title2d[1]\n        self.transformz = title2d[2]\n        self.id = id# adds an ID variable\n#--------------------------------------------------------------------------------------\n\nclass Mac(pygame.sprite.Sprite):# Clase hija\n    def __init__(self,xpos,ypos,who,scale,id):# asks this for a x annd y position and a reference\n        super(Mac, self).__init__()\n        self.who = who# who is a number string, always it most be a string\n        # bc off the line of code below, it references to the name of the image\n        # you want to use\n        if self.who == \"None\":\n            self.image = pygame.image.load(\"images/button.png\").convert_alpha()\n        else:\n            self.image = pygame.image.load(\"images/\"+self.who+\".png\").convert_alpha()\n        self.image = pygame.transform.scale(self.image,(scale,scale))\n        if self.who == \"11\":\n            self.image = pygame.transform.scale(self.image,(2*scale,scale))\n        # the height and width of a given image\n        self.rect = self.image.get_rect(center=(xpos, ypos))# this is the cntral position of the image\n        self.id = id# adds an ID variable\n\n", "pygame - Sprite count class": "# Attributes NOTE super important to remember\n\nclass Sprite:\n    number_of_sprites = 0\n    def __init__(self,name):\n        self.name = name\n        print(f'{self.name}')\n        Sprite.number_of_sprites += 1\n\nsprites = [Sprite(f'Sprite{i}') for i in range(10)]\nprint(Sprite.number_of_sprites)\n\n", "pygame - bg text changes when press a key from de keyboard": "\n# pygame: change color background when clicked a key\nzpressed = (0,0,0)}\nfontsize = 40\nkeyspace = np.zeros((6))\nkeyboard = ['z','x','c','v','b','n']\nfor i in range(6):\n    keyspace[i] = fontsize + i*(fontsize+10)\nprint(keyspace)\ndef button(string,xi,yi,colorbg):\n    pygame.draw.rect(screen,colorbg,(xi,yi,fontsize+20,fontsize+20))\n    textsurface = font.render(string,1,(180,10,100))\n    screen.blit(textsurface,(xi+10,yi+10))\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            sys.exit()\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_z:\n                zpressed = (255,255,255)\n        if event.type == pygame.KEYUP:\n            if event.key == pygame.K_z:\n                zpressed = (0,0,0)\n        button(keyboard[0],keyspace[0],50,zpressed)\n", "pygame - button class": "class Button():\n    def __init__(self, image, pos, text_input, font, base_color, hovering_color):\n            self.image = image\n            self.x_pos = pos[0]\n            self.y_pos = pos[1]\n            self.font = font\n            self.base_color, self.hovering_color = base_color, hovering_color\n            self.text_input = text_input\n            self.text = self.font.render(self.text_input, True, self.base_color)\n            if self.image is None:\n                    self.image = self.text\n            self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))\n            self.text_rect = self.text.get_rect(center=(self.x_pos, self.y_pos))\n\n    def update(self, screen):\n            if self.image is not None:\n                    screen.blit(self.image, self.rect)\n            screen.blit(self.text, self.text_rect)\n\n    def checkForInput(self, position):\n            if position[0] in range(self.rect.left, self.rect.right) and position[1] in range(self.rect.top, self.rect.bottom):\n                    return True\n            return False\n\n    def changecolor(self, position):\n        if position[0] in range(self.rect.left, self.rect.right) and position[1] in range(self.rect.top, self.rect.bottom):\n            self.text = main_font.render(self.text_input, True, \"green\")\n        else:\n            self.text = main_font.render(self.text_input, True, \"white\")\n            \nbutton_surface = pygame.image.load(\"button.png\")\nbutton_surface = pygame.transform.scale(button_surface, (200, 75))\n\nbutton = Button(button_surface, 200, 200, \"Click me!\")\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n        if event.type == pygame.MOUSEBUTTONDOWN:\n            button.checkforinput(pygame.mouse.get_pos())\n\n    screen.fill((\"black\"))\n\n    button.update()\n    button.changecolor(pygame.mouse.get_pos())\n    segundero = segundero + 1\n    pygame.display.update()\n", "pygame - class_projection": "\nimport pygame, sys\nimport numpy as np\nfrom math import *\n##from Mac_sprites import Mac\n\nclass Draw3d:\n    def __init__(self,screen,scale,cubepos):\n        self.projection_matrix = np.matrix([\n            [1,0,0],\n            [0,1,0]])\n        self.screen = screen\n        self.scale = scale\n        self.cubepos = cubepos\n         \n     \n    def projection(self,points,showpoints,feature,color):# Reicbe una lista de\n    # puntos 3d y devuelve una lista de listas que en realidad son las coordenadas\n    # de donde esta el punto 3d pero proyectado en 2d\n    # f(Lista de puntos Puntos 3D) = lista de puntos 2d proyectados sobre screen\n        i = 0\n        projected_points = [[n,n] for n in range(len(points))]\n        for point in points:\n            rotated2d = np.dot(self.rotations[2], point.reshape((3,1)))\n            rotated2d = np.dot(self.rotations[1], rotated2d)\n            rotated2d = np.dot(self.rotations[0], rotated2d)\n            \n            projected2d = np.dot(self.projection_matrix, rotated2d)\n            \n            x = int(projected2d[0][0] * self.scale) + self.cubepos[0]\n            y = int(projected2d[1][0] * self.scale) + self.cubepos[1]\n\n            projected_points[i] = [x,y]\n            if showpoints:\n                pygame.draw.circle(self.screen, \"Black\", (x,y), 5)\n            if feature == 'star':\n                self.star(color,x,y)\n            elif feature == 'no':\n                pass\n            else:\n                self.text(feature,x,y,20,color)\n            i += 1\n        return projected_points\n\n    def set_rotations(self,rotations):\n        self.rotations = rotations\n\n    def star(self,color,x,y):# AQUI YA ESTA STAR\n        pygame.draw.circle(self.screen, color, (x,y), 5)\n        pygame.draw.line(self.screen,color,(self.cubepos[0],self.cubepos[1]),(x,y))\n\n    def drawtubo(self,tubo,isflowing,segundero,state,showpoints):# FUNCION TTPO DRAW\n        extremos = self.projection(tubo,showpoints,'no','no')# los extremos 3D proyectalos en screen 2D \n        pygame.draw.line(self.screen,(200,200,200),(extremos[0][:]),(extremos[1][:]),6)#Tuberia gris (OFF)\n        if isflowing:\n            self.flujo((extremos[0][:]),(extremos[1][:]),5,segundero,state)# flujo proyectados sobre la tuberia (ON)\n\n    def flatsurface(self,n,planes):# Funcion tipo DRAW\n        # \"n\" : LA MITAD DEL LADO DE UN CUADRADO\n        # planes: los puntos 3d que forman la rejilla o el plano \n        m = 2*n+1# EL LADO DEL CUADRADO + 1\n        projectedsurfaces = self.projection(planes,False,'no','no')# 3D to proj_2D\n        for i in range(int(2*m)):\n            pygame.draw.line(self.screen,(0,0,10),(projectedsurfaces[i*2][0],projectedsurfaces[i*2][1]),(projectedsurfaces[2*i+1][0],projectedsurfaces[2*i+1][1]))\n\n    def drawcube(self,points,showpoints):# FUNCION TIPO DRAW\n    # Recibe un listado de puntos 3D Y DIBUJA LAS ARISTAS DE LOS VERTICES CONTENIDOS EN LA LISTA DE PUNTOS 3D\n    # PROYECTADOS A 2D\n        projected_points  = self.projection(points,showpoints,'no','no')# De 3D a \"d proyectados en screen\n        for i in range(4):# esta funcion dibuja las aristas del cubo\n            pygame.draw.line(self.screen,\"Black\",(projected_points[i][0],projected_points[i][1]),(projected_points[i+4][0],projected_points[i+4][1]))\n            pygame.draw.line(self.screen,\"Black\",(projected_points[i*2][0],projected_points[i*2][1]),(projected_points[i*2+1][0],projected_points[i*2+1][1]))\n            if i >= 2:\n                q = i+2\n                pygame.draw.line(self.screen,\"Black\",(projected_points[q][0],projected_points[q][1]),(projected_points[q+2][0],projected_points[q+2][1]))\n            else:\n                pygame.draw.line(self.screen,\"Black\",(projected_points[i][0],projected_points[i][1]),(projected_points[i+2][0],projected_points[i+2][1]))\n\n    def flujo(self,A,B,mass,segundero,state):# FUNCION TIPO DRAW (X,Y)\n        chunks = 50\n        dx = (B[0]-A[0])/chunks\n        dy = (B[1]-A[1])/chunks\n        listpositions = np.ones((chunks+1,2))\n        for it in range(chunks+1):\n            listpositions[it,0] = A[0] + it*dx\n            listpositions[it,1] = A[1] + it*dy\n        for i in range(chunks):\n            f = int((255*sin(0.7*i+segundero)**2))\n            # por que 255*sin()**2?\n            #   como sin()**2 tiene un rango entre 0 y 1, al multriplicarlo por un\n            #   numero n da una variacion entre cero y ese numero n\n            # el segundero es lo que actua como un desfasador lo que hace que se mueva en un sentido\n            if state == 'liq':\n                pygame.draw.line(self.screen,(0,f,f),(listpositions[i,:]),(listpositions[i+1,:]),int(mass))\n            elif state == 'vap':\n                pygame.draw.line(self.screen,(f,0,0),(listpositions[i,:]),(listpositions[i+1,:]),int(mass))\n            elif state == 'wst':\n                v = int(f/2+20)\n                pygame.draw.line(self.screen,(v,v,v),(listpositions[i,:]),(listpositions[i+1,:]),int(mass))\n\n\n\n#### THE MURDERER SECTION ####\n    def draw_the_murder(self,mur_coor):\n        projected_points  = self.projection(mur_coor,True,'no','no')\n\n    \n    def text(self,string,xi,yi,size,color):# Funcion tipo DRAW\n    # ingresas un string recibes un screen.blit\n        font = pygame.font.SysFont('Comic Sans MS', size)\n        textsurface = font.render(string,False,color)\n        text_rect = textsurface.get_rect(center=(xi,yi))\n        self.screen.blit(textsurface,text_rect)\n\n    def addimages(self,titlespos,who_list,scale,cubepos,rotation_x, rotation_y, rotation_z):# FUNCION TIPO CREATE\n        images = pygame.sprite.Group()# hERE IT CREATES THE SPRITE\n        for i,j in enumerate(titlespos):# TRANSFORMS THE  3D COORDINATE VECTOR INTO 2D PROJECTED VECTOR\n            rotated2d = np.dot(self.rotations[2], j.reshape((3,1)))\n            rotated2d = np.dot(self.rotations[1], rotated2d)\n            rotated2d = np.dot(self.rotations[0], rotated2d)\n            title = np.dot(projection_matrix, title2d)\n            x = int(title[0][0] * scale) + cubepos[0]\n            y = int(title[1][0] * scale) + cubepos[1]\n            images.add(Mac(x,y,who_list[i],scale,i))# THEN WE FINALLY ADD TO THE SPRITE GROUP OBJECT CALLED images\n            # A CLASS OBJECT FROM Mac CLASS, SO NOW THE OBJECT WITH THE POSITION, THE IMAGE  THE SCALE AND ITS ID ARE LOADED INTO THE SPRITE GROUP OBJECT\n            # SO NOW, EVERY MAC OBJECTT STORED IN IMAGES CAN BE DISPLAYED ONTO THE SCREEN\n        return images\n\n    @staticmethod\n    def tubo (A,B):# FUNCION TIPO CREATE\n    # funcion que recibe 2 arrays 3D y los guarda en una lista\n    # devuelve una losta con los exxtrems en array\n        tube = []\n        tube.append(np.matrix([A]))\n        tube.append(np.matrix([B]))\n        return tube\n\n    @staticmethod\n    def cubo(centro,l):# FUNCION TIPO CREATE\n    # Recibe un punto 3d y devuelve una lsita de puntos 3d indicando cada vertice\n    # crea una lista con todos los vertices de un cubo \n        cubox  = []\n        for i in range(2):\n            for j in range(2):\n                for k in range(2):\n                    cubox.append(np.matrix([centro[0]+(-1)**i*l/2,centro[1]+(-1)**j*l/2,centro[2]+(-1)**k*l/2]))\n\n        return cubox\n    \n    @staticmethod\n    def planemaker(n):# FUNCION CREATE LIST , RECIBE UN PARAMETRO Y SOBRE ESE\n    # CREA Y DEVUELVE UNA LISTA DE PUNTOS 3D \n        planes = []\n        m = 2*n+1# EL LADO DEL CUADRADO + 1\n        for i in range(m):# de 0 a Lado del cuadrado\n            planes.append(np.matrix([n-i,0,n]))\n            planes.append(np.matrix([n-i,0,-n]))\n        for i in range(m):\n            planes.append(np.matrix([n,0,n-i]))\n            planes.append(np.matrix([-n,0,n-i]))\n        return planes\n    \n    @staticmethod\n    def starmaker(n):\n        star = []\n        for i in range(3):\n            for j in range(2):\n                print(j)\n                point = np.zeros((3))\n                point[i] = n*(-1**j)\n                star.append(point)\n        return star\n", "pygame - colorfade (cuadrado latiendo) metodo": "def colorfade(t,xi,yi,w,h):\n    ut = math.sin(t/20)**2\n    pygame.draw.rect(screen,(25-25*ut,2-2*ut,125-125*ut),(xi,yi,w,h))\n# EN en WHILE LOOP\ncolorfade(segundero,100,100,200,200)\n", "pygame - flujo method": "def flujo(A,B,mass,segundero):\n    chunks = 100\n    dx = (B[0]-A[0])/chunks\n    dy = (B[1]-A[1])/chunks\n    listpositions = np.ones((chunks+1,2))\n    for it in range(chunks+1):\n        listpositions[it,0] = A[0] + it*dx\n        listpositions[it,1] = A[1] + it*dy\n    for i in range(chunks):\n        f = int((255*math.sin(0.2*i-segundero)**2))\n        # por que 255*math.sin()**2?\n        #   como sin()**2 tiene un rango entre 0 y 1, al multriplicarlo por un\n        #   numero n da una variacion entre cero y ese numero n\n        # el segundero es lo que actua como un desfasador lo que hace que se mueva en un sentido\n        pygame.draw.line(screen,(0,f,f),(listpositions[i,:]),(listpositions[i+1,:]),int(mass))\n", "pygame - menu example": "# Dibujador de quimica organica\nimport pygame, sys\nfrom button import Button\n\npygame.init()\n\nSCREEN = pygame.display.set_mode((1280, 720))\npygame.display.set_caption(\"Dibujador de quimica\")\n\n\n\ndef get_font(size): # Returns Press-Start-2P in the desired size\n    return pygame.font.SysFont('freesansbold.ttf', size)\n\ndef play():\n    while True:\n        PLAY_MOUSE_POS = pygame.mouse.get_pos()\n\n        SCREEN.fill(\"black\")\n\n        PLAY_TEXT = get_font(45).render(\"This is the PLAY screen.\", True, \"White\")\n        PLAY_RECT = PLAY_TEXT.get_rect(center=(640, 260))\n        SCREEN.blit(PLAY_TEXT, PLAY_RECT)\n\n        PLAY_BACK = Button(image=None, pos=(640, 460), \n                            text_input=\"BACK\", font=get_font(75), base_color=\"White\", hovering_color=\"Green\")\n\n        PLAY_BACK.changeColor(PLAY_MOUSE_POS)\n        PLAY_BACK.update(SCREEN)\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                if PLAY_BACK.checkForInput(PLAY_MOUSE_POS):\n                    main_menu()\n\n        pygame.display.update()\n    \ndef options():\n    while True:\n        OPTIONS_MOUSE_POS = pygame.mouse.get_pos()\n\n        SCREEN.fill(\"white\")\n\n        OPTIONS_TEXT = get_font(45).render(\"This is the OPTIONS screen.\", True, \"Black\")\n        OPTIONS_RECT = OPTIONS_TEXT.get_rect(center=(640, 260))\n        SCREEN.blit(OPTIONS_TEXT, OPTIONS_RECT)\n\n        OPTIONS_BACK = Button(image=None, pos=(640, 460), \n                            text_input=\"BACK\", font=get_font(75), base_color=\"Black\", hovering_color=\"Green\")\n\n        OPTIONS_BACK.changeColor(OPTIONS_MOUSE_POS)\n        OPTIONS_BACK.update(SCREEN)\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                if OPTIONS_BACK.checkForInput(OPTIONS_MOUSE_POS):\n                    main_menu()\n\n        pygame.display.update()\n\ndef main_menu():\n    while True:\n        SCREEN.fill(\"Black\")\n\n        MENU_MOUSE_POS = pygame.mouse.get_pos()\n\n        MENU_TEXT = get_font(100).render(\"MAIN MENU\", True, \"#b68f40\")\n        MENU_RECT = MENU_TEXT.get_rect(center=(640, 100))\n\n        PLAY_BUTTON = Button(image=None, pos=(640, 250), \n                            text_input=\"PLAY\", font=get_font(75), base_color=\"#d7fcd4\", hovering_color=\"White\")\n        OPTIONS_BUTTON = Button(image=None, pos=(640, 400), \n                            text_input=\"OPTIONS\", font=get_font(75), base_color=\"#d7fcd4\", hovering_color=\"White\")\n        QUIT_BUTTON = Button(image=None, pos=(640, 550), \n                            text_input=\"QUIT\", font=get_font(75), base_color=\"#d7fcd4\", hovering_color=\"White\")\n\n        SCREEN.blit(MENU_TEXT, MENU_RECT)\n\n        for button in [PLAY_BUTTON, OPTIONS_BUTTON, QUIT_BUTTON]:\n            button.changeColor(MENU_MOUSE_POS)\n            button.update(SCREEN)\n        \n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                if PLAY_BUTTON.checkForInput(MENU_MOUSE_POS):\n                    play()\n                if OPTIONS_BUTTON.checkForInput(MENU_MOUSE_POS):\n                    options()\n                if QUIT_BUTTON.checkForInput(MENU_MOUSE_POS):\n                    pygame.quit()\n                    sys.exit()\n\n        pygame.display.update()\n\nmain_menu()\n", "pygame - mousebuttondown controls": "\nimport pygame\npygame.init()\n\nSCREEN = pygame.display.set_mode((420, 720))\npygame.display.set_caption(\"Ubicacion de los clicks del mouse\")\nrun = True\nwhile run:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            run = False\n\n        if event.type == pygame.MOUSEBUTTONDOWN:\n            if event.button == 1: # left mouse button\n                print(\"left mouse button\")\n            elif event.button == 2:# middle mouse button\n                print(\"middle mouse button\")\n            elif event.button == 3:# right mouse button\n                print(\"right mouse button\")\n            elif event.button == 4:# mouse wheel up\n                print(\"mouse wheel up\")\n            elif event.button == 5:# mouse wheel down\n                print(\"mouse wheel down\")\n\n", "pygame - pendulo player movement method": "import pygame, sys\nimport numpy as np\nimport math\nHEIGHT, WIDTH = 400,400\nscreen = pygame.display.set_mode((HEIGHT,WIDTH))\nclock = pygame.time.Clock()\n\ncentropendulo = np.array([200,50])\ntb = 200\nside = 0\nspeedr = 0\nspeedt = 0\n\nwhile True:\n\n    for event in pygame.event.get():\n        \n        #print(event)\n        \n        if event.type == pygame.QUIT:\n            sys.exit()\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_w:\n                speedr = -5\n            if event.key == pygame.K_s:\n                speedr =5\n            if event.key == pygame.K_a:\n                speedt = -math.pi/100\n            if event.key == pygame.K_d:\n                speedt = math.pi/100\n        if event.type == pygame.KEYUP:\n            if event.key == pygame.K_w:\n                speedr = 0\n            if event.key == pygame.K_s:\n                speedr = 0\n            if event.key == pygame.K_a:\n                speedt = 0\n            if event.key == pygame.K_d:\n                speedt =o 0\n\n\n    screen.fill((0,0,0))\n    tb = tb + speedr\n    side = side +speedt\n    playerposition = np.array([(tb*math.cos(-side + math.pi/2)),(tb*math.sin(-side+math.pi/2))])+centropendulo\n    pygame.draw.line(screen,(255,0,0),centropendulo,playerposition)\n\n# A partir de aqui terminas\n    pygame.display.update()\n    clock.tick(30)\n", "pygame - plantilla con un jugador": "\nimport pygame, sys\nimport numpy as np\nimport math\nfrom controls import Controls\n# Initialize the pygame\npygame.init()\n#Create the screen\nHEIGHT, WIDTH = 600,600\nscreen = pygame.display.set_mode((HEIGHT,WIDTH))\npygame.display.set_caption(\"Pygame project\")\npygame.font.init()\nfont = pygame.font.SysFont('Comic Sans MS', 30)\n#Create the clock\nclock = pygame.time.Clock()\n # variables\nsegundero = 0\n # [X, Y]\ncur_vel = [0, 0]\ncur = [100,100]\n# Funciones de dibujo\ndef dot(xi,yi,r):\n    pygame.draw.circle(screen,(255,255,0),(xi,yi),r)\ndef line(xi,yi,xf,yf):\n    pygame.draw.line(screen,(255,255,255),(xi,yi),(xf,yf),1)\ndef rect(xi,yi,w,h):\n    pygame.draw.rect(screen,(255,255,255),(xi,yi,w,h))\ndef text(string,xi,yi):\n    textsurface = font.render(string,False,(10,100,100))\n    screen.blit(textsurface,(xi,yi))\ndef panel(xi,yi,string):\n    w,h = 250,40\n    pygame.draw.rect(screen,(25,25,255),(xi,yi,w,h))\n    textsurface = font.render(string,False,(255,255,255))\n    screen.blit(textsurface,(xi,yi))\ndef cursor(xi,yi):\n    ri,re = 10,12\n    pygame.draw.circle(screen,(0,0,0),(xi,yi),re)\n    pygame.draw.circle(screen,(255,255,255),(xi,yi),ri)\ndef vaso(xi,yi,w,h,e):\n    pygame.draw.rect(screen,(255,255,255),(xi,yi,w,h))\n    pygame.draw.rect(screen,(0,0,0),(xi+e,yi,w-2*e,h-e))\n    \nwhile True:\n    tiempo = pygame.time.get_ticks()\n    # LOS CONTROLES\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            # EL ORDEN DE ESTOS DOW SI IMPORTA\n            pygame.quit()\n            sys.exit()\n            \n            break\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_DOWN:\n                pass\n            if event.key == pygame.K_UP:\n                pass\n            if event.key == pygame.K_q:\n                pass\n            if event.key == pygame.K_w:\n                cur_vel[1] = -10\n            if event.key == pygame.K_a:\n                cur_vel[0] = -10\n            if event.key == pygame.K_x:\n                pass\n            if event.key == pygame.K_d:\n                cur_vel[0] = 10\n            if event.key == pygame.K_s:\n                cur_vel[1] = 10\n            if event.key == pygame.K_n:\n                pass\n            if event.key == pygame.K_f:\n                pass\n        if event.type == pygame.KEYUP:\n            if event.key == pygame.K_DOWN:\n                pass\n            if event.key == pygame.K_UP:\n                pass\n            if event.key == pygame.K_q:\n                pass\n            if event.key == pygame.K_w:\n                cur_vel[1] = 0\n            if event.key == pygame.K_e:\n                pass\n            if event.key == pygame.K_r:\n                pass\n            if event.key == pygame.K_a:\n                cur_vel[0] = 0\n            if event.key == pygame.K_s:\n                cur_vel[1] = 0\n            if event.key == pygame.K_d:\n                cur_vel[0] = 0\n            if event.key == pygame.K_f:\n                pass\n    # A partir de aqui dibujas\n    screen.fill((0,0,0))\n    #cursor\n    cur[0] += cur_vel[0]\n    cur[1] += cur_vel[1]\n    vaso(cur[0],cur[1],100,100,10)\n    #Aqui termina el loop\n    segundero = segundero + 1\n    pygame.display.update()\n    clock.tick(30)\n\n", "pygame - projection & rotation class": "\nimport pygame, sys\nimport numpy as np\nfrom math import *\nclass Tridi_drawing:\n    @staticmethod\n    def projection(points,scale,cubepos,rotations,screen,color_pointa,showpoints,feature):\n    # Recibe una lista de puntos 3d y devuelve una lista de listas\n    # que en realidad son las coordenadas de donde esta el punto\n    # 3d pero en el espacio 2d\n    # f(Lista de puntos Puntos 3D) = lista de puntos 2d proyectados sobre screen\n    # none #0\n    # star 'star'\n        projection_matrix = np.matrix([\n            [1,0,0],\n            [0,1,0]])\n        black = (0,0,0)\n        i = 0\n        projected_points = [[n,n] for n in range(len(points))]\n        for point in points:\n            rotated2d = np.dot(rotations[2], point.reshape((3,1)))\n            rotated2d = np.dot(rotations[1], rotated2d)\n            rotated2d = np.dot(rotations[0], rotated2d)\n            \n            projected2d = np.dot(projection_matrix, rotated2d)\n            \n            x = int(projected2d[0][0] * scale) + cubepos[0]\n            y = int(projected2d[1][0] * scale) + cubepos[1]\n\n            projected_points[i] = [x,y]\n            if showpoints:\n                pygame.draw.circle(screen, \"Black\", (x,y), 5)\n    ##            if i== 0:\n    ##                pygame.draw.circle(screen, color_pointa, (x,y), 5)\n            if feature == 'star':# only when we have a star structure\n                pygame.draw.circle(screen, color_pointa, (x,y), 5)\n                pygame.draw.line(screen,color_pointa,(cubepos[0],cubepos[1]),(x,y))\n            i += 1\n        return projected_points\n\n    @staticmethod\n    def rotation(anglex,angley,anglez):#\n    # Recibe 3 valores llamados angulos y devuelve 3 matrices\n    #que representan el movimiento de rotacion en tal direccion\n        rotation_z = np.matrix([\n            [cos(anglez),-sin(anglez),0],\n            [sin(anglez),cos(anglez),0],\n            [0,0,1]\n            ])\n\n        rotation_y = np.matrix([\n            [cos(angley),0,sin(angley)],\n            [0,1,0],\n            [-sin(angley),0,cos(angley),]\n            ])\n\n        rotation_x = np.matrix([\n            [1,0,0],\n            [0,cos(anglex),-sin(anglex)],\n            [0,sin(anglex),cos(anglex)]\n            ])\n        return rotation_x, rotation_y, rotation_z\n", "pygame - rect drawed inside a circle using keyboard": "def rect_in_circle(screen,cur_x,cur_y):\n    #first point\n    p= np.array([200*math.cos(-cur_x)+200,200*math.sin(-cur_x)+200])\n    #second point\n    l = np.array([200*math.cos(cur_x)+200,200*math.sin(cur_x)+200])\n    #first point\n    y = np.array([-200*math.cos(-cur_x)+200,-200*math.sin(-cur_x)+200])\n    #second point\n    u = np.array([-200*math.cos(cur_x)+200,-200*math.sin(cur_x)+200])\n\n    rect(y[0],y[1],(p[0]-y[0]),(p[1]-l[1]))\n    \n    line(p[0],p[1],l[0],l[1])\n    line(l[0],l[1],y[0],y[1])\n    line(y[0],y[1],u[0],u[1])\n    line(u[0],u[1],p[0],p[1])\n    \n    pygame.draw.circle(screen,(0,100,100),(p),4)\n    pygame.draw.circle(screen,(255,100,100),(l),4)\n    pygame.draw.circle(screen,(2,100,100),(y),4)\n    pygame.draw.circle(screen,(255,100,10),(u),4)\n", "pyinstaller - Metodo : guardar imagenes": "\ndef resource_path(relative_path):\n    \"\"\" Get absolute path to resource, works for dev and for PyInstaller \"\"\"\n    try:\n        # PyInstaller creates a temp folder and stores path in _MEIPASS\n        base_path = sys._MEIPASS2 \n    except Exception:\n        base_path = os.path.abspath(\".\")\n\n    return os.path.join(base_path, relative_path)\n", "pytesseract - detecting text from an image": "from PIL import Image\nfrom pytesseract import pytesseract\npath_to_tes = r'C:/Program Files/Tesseract-OCR/tesseract.exe'\npath_to_image = r'C:/Users/Fer/AppData/Local/Programs/Python/Python310/los_codigos/Lector de codigos python/img1.png'\n\npytesseract.tesseract_cmd = path_to_tes\nimg = Image.open(path_to_image)\ntext = pytesseract.image_to_string(img)\nprint(text)\n", "python - Herencia \u00bfComo funciona?": "# herencia\n\n#cuando tienes 2 clases similares, puedes crearlas a partir de una clase superior\n# o tambien llamado, parent\n\n#Example\n\nclass Pet:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def show(self):\n        print(F\" i AM {self.name} and I am {self.age} years old\")\n\n    def speak(self):\n        print('This is a message from the parent class')\n\n\nclass Cat (Pet):\n    def __init__(self,name,age,color):\n        super().__init__(name,age)\n        self.color = color\n        \n    def speak(self):\n        print(\"Meow\")\n\n    def show(self):\n        print(f'I am {self.name} and I am {self.age} years old and i am {self.color}')\n    \nclass Dog(Pet):\n    def speak(self):\n##        print(\"Bark\")\n        pass\np  = Pet(\"Tim\", 19)\np.show()\np.speak()\nd = Dog('snow',10)\nd.show()\nd.speak()\nc = Cat('Bill',12,'brown')\nc.show()\nc.speak()\n", "python - escribir un archivo python": "\n    with open('mirror.py', 'w', encoding='utf-8') as archivo:\n    # Escribir contenido en el archivo\n    archivo.write('Aqui va la Documentaci\u00f3n')\n", "random - randint": "import random\nconceptos = {1: 'caja',\n             2: 'clientes',\n             3: 'deudores diversos',\n             4: 'documentos por cobrar',\n             5: 'mobiliario'}\nfor i in range(10):\n    print(conceptos[random.randint(1,5)])\n", "re - findall()": "#re.findall() returns a list of the string asked to be found, if the\n# str is found 3 times, te.findall will return\n# ['askedword','askedword','askedword']\nimport re\nfrom collections import Counter\na = ['hola','laho','lada','folala','hola','laho','folala','folala']\na_counted = Counter(a)\nprint(a_counted)\na_sd = set(a)\nprint(a_sd)\na_sdl = list(a_sd)\nfor i,j in enumerate(a_sdl):\n    x = len(re.findall('la',j))\n    print(x)\n\n", "smtplib - send an Email": "\nimport smtplib\n\n# Set up the email message\nsender_email = \"escherichiacoli.enteroinvasiva@gmail.com\"\nreceiver_email = \"politropic123@gmail.com\"\nsubject = \"Correo de prueba\"\nbody = \"CUerpo de prueba\"\n\nmessage = f\"Subject: {subject}\n\n{body}\"\n\n# Set up the SMTP server connection\nsmtp_server = \"smtp.example.com\"\nsmtp_port = 25  # Replace with the appropriate port for your server\nsmtp_username = \"your_email@example.com\"\nsmtp_password = \"your_email_password\"\n\nwith smtplib.SMTP(smtp_server, smtp_port) as server:\n    server.starttls()\n    server.login(smtp_username, smtp_password)\n    server.sendmail(sender_email, receiver_email, message)\n", "subprocess - open a program using python": "\nimport subprocess\n\n# Replace 'your_script.py' with the actual path to your Python file\npython_file_path = 'C:/Users/Fer/AppData/Local/Programs/Python/Python310/los_codigos/Taller de fernando/Proyecto_1/dicctotree.py'\n\ntry:\n    # Run IDLE with the specified Python file\n    subprocess.run(['python', python_file_path])#, python_file_path\nexcept FileNotFoundError:\n    print(\"Error: IDLE not found. Make sure it is installed and in your system's PATH.\")\nexcept subprocess.CalledProcessError as e:\n    print(f\"Error: Failed to open '{python_file_path}' with IDLE. Return code: {e.returncode}\")\n\n", "tkinter - Checkbuttons": "\n    # CHebuttons menu: EQUIPO A UTILIZAR\n    # CODIGO PROVISTO POR CHATGPT-------------------------------------------------------\n    chopciones = {}\n    chopcion1 = tk.Checkbutton(d4, text=\"Dispersor\",bg=colores[1])\n    chopcion2 = tk.Checkbutton(d4, text=\"Reactor\",bg=colores[1])\n    chopcion3 = tk.Checkbutton(d4, text=\"Tina\",bg=colores[1])    \n    chopcion4 = tk.Checkbutton(d4, text=\"Tambor de proceso\",bg=colores[1])\n    # Agregar las casillas de verificaci\u00f3n al diccionario y asignarles una variable de control\n    chopciones[\"Dispersor\"] = tk.BooleanVar()\n    chopciones[\"Reactor\"] = tk.BooleanVar()\n    chopciones[\"Tina\"] = tk.BooleanVar()\n    chopciones[\"Tambor de proceso\"] = tk.BooleanVar()\n\n    chopcion1.config(variable=chopciones[\"Dispersor\"], command=actualizar_seleccion)\n    chopcion2.config(variable=chopciones[\"Reactor\"], command=actualizar_seleccion)\n    chopcion3.config(variable=chopciones[\"Tina\"], command=actualizar_seleccion)\n    chopcion4.config(variable=chopciones[\"Tambor de proceso\"], command=actualizar_seleccion)\n    \n    # Colocar las casillas de verificaci\u00f3n en la ventana\n    chopcion1.grid(row=0,column=0)\n    chopcion2.grid(row=0,column=1)\n    chopcion3.grid(row=1,column=0)\n    chopcion4.grid(row=1,column=1)\n", "tkinter - Combobox": "# --COMBOBOX------------------------------------------------OPCION 3-----------------------------------------------------------------------------------------\n    ############# Option 3 content                                                                      # BANNER\n    option_frames[lista_opciones[2]] = tk.Frame(d3)\n    banners_var = tk.StringVar()\n    # OPCIONES DE LOS BANNERS\n    lista_banners = ['b1 BANNER DE PREPARACION ',\n                     'b2 BANNER DE EPP',\n                     'b3 BANNER DE PESE, CALCULE, ANOTE, A\u00d1ADA, TIRE',\n                     'b4 BANNER DE MEZCLAR EN 4 PARTES',\n                     'b5 BANNER DE advert. de explosion',\n                     'b6 ADVERTENCIA DEL TDI',\n                     'b7 CONSIDERACIONES B\u00c1SICAS ANTES DE EMPEZAR EL PROCESO',\n                     'b8 MANTENGA LIMPIO SU REACTOR',\n                     'b9 PASE MUESTRA A CALIDAD'\n                     ]\n    tk.Label(option_frames[lista_opciones[2]], text=\"Agregar Banner\").grid(row=row, column=0)# ETIQUETA \n    banner_combo = ttk.Combobox(option_frames[lista_opciones[2]], textvariable=banners_var, values=lista_banners)# MENU COMBOBOX\n    banner_combo.current(0)\n    banner_combo.grid(row=row, column=1)", "tkinter - Entry": "\n    # ENTRY        \n    # Crear una variable de tipo StringVar\n    presion_var = tk.StringVar()\n    # Establecer un valor predeterminado inicial\n    presion_var.set(\"1\")\n    presion_entry = tk.Entry(d2,textvariable=presion_var,font=(\"Helvetica\",15))\n    presion_entry.grid(row=0, column=0)\n", "tkinter - LabelFrame": "\n    label = ttk.LabelFrame(datos, text=\"Crear Metodo de Fabricaci\u00f3n Estandar\")\n    label.grid(row=0, column=0,padx = (10,10),pady=(10,10))\n", "tkinter - Scrollbar a un tk.text": "\nimport tkinter as tk\nfrom tkinter import scrolledtext\n\n# Crear la ventana principal\nventana = tk.Tk()\nventana.title(\"Text con Scrollbar\")\n\n# Crear un widget Text\ntexto = scrolledtext.ScrolledText(ventana, wrap=tk.WORD, width=40, height=10)\n\n# Crear un widget Scrollbar\nscrollbar = tk.Scrollbar(ventana, command=texto.yview)\nscrollbar.pack(side=tk.RIGHT, fill=tk.Y)\n\n# Configurar la conexi\u00f3n entre el Text y el Scrollbar\ntexto.config(yscrollcommand=scrollbar.set)\n\n# Agregar texto de ejemplo al Text\ntexto.insert(tk.END, \"Este es un ejemplo de texto largo. \" * 10)\n\n# Empaquetar el widget Text\ntexto.pack(padx=10, pady=10)\n\n# Iniciar el bucle principal\nventana.mainloop()\n\n", "tkinter - Text Metodo: .get()": "import tkinter as tk\n\ndef obtener_texto():\n    contenido_texto = texto.get(\"1.0\", \"end-1c\")  # Obtiene el contenido del widget Text\n    print(\"Contenido del Text:\", contenido_texto)\n\n# Crear la ventana principal\nventana = tk.Tk()\nventana.title(\"Ejemplo de Tkinter con Text\")\n\n# Crear un widget Text\ntexto = tk.Text(ventana, height=10, width=40)\ntexto.pack(pady=10)\n\n# Crear un bot\u00f3n para obtener el texto\nboton_obtener_texto = tk.Button(ventana, text=\"Obtener Texto\", command=obtener_texto)\nboton_obtener_texto.pack()\n\n# Iniciar el bucle de eventos\nventana.mainloop()\n\n", "tkinter - Toplevel :multiples ventanas": "\nimport tkinter as tk\nfrom tkinter import ttk\nfrom tkinter import messagebox\nimport json\nfrom PIL import Image, ImageTk\nimport time\n# Configurar tecla para alternar fullscreen (por ejemplo, F11)\ndef toggle_fullscreen(event=None):\n    estado_fullscreen = second_window.attributes('-fullscreen')\n    second_window.attributes('-fullscreen', not estado_fullscreen)\n## Ventana Padre\nroot = tk.Tk()\nroot.config(bg=\"black\")\nroot.title(\"PETRA: GENERADOR DE METODOS\")\nroot.focus_force()\nroot.option_add(\"*tearOff\", False) # This is always a good idea\n# Make the app responsive\nroot.columnconfigure(index=0, weight=1)\nroot.columnconfigure(index=1, weight=2)\n##root.columnconfigure(index=2, weight=1)\nroot.rowconfigure(index=0, weight=2)\nroot.rowconfigure(index=1, weight=1)\n\ndef ventana_hija(ventana_padre):\n    #FRAMES\n    second_window = tk.Toplevel(root,bg=\"#046546\")# 0\n    second_window.title(\"Crear Metodo de Fabricaci\u00f3n Estandar\")\n    # Make the app responsive\n    second_window.columnconfigure(index=0, weight=1)\n    second_window.columnconfigure(index=1, weight=1)\n    second_window.columnconfigure(index=2, weight=1)\n    second_window.rowconfigure(index=0, weight=1)\n    second_window.rowconfigure(index=1, weight=1)\n    second_window.rowconfigure(index=2, weight=1)\n    # Hacer que la ventana sea fullscreen desde el inicio\n    second_window.attributes('-fullscreen', False)\n    second_window.bind('<F11>', toggle_fullscreen)\n    second_window.bind('<Escape>', lambda event: second_window.attributes('-fullscreen', False))\n    second_window.focus_force()\nventana_hija(root)\n", "tkinter - boton": "\n    # Funcion para que el boton sea activado presionando ENTER\n    def on_enter(event):\n        event.widget.invoke()  # Simular clic en el bot\u00f3n al presionar Enter\n    # --BOTONES: -----------------------------------------------------------------------------------------------------------------\n    br = tk.Button(d5,text=\"Reactivo\",command=agregar_r,bg=colores[1], state=tk.DISABLED)\n    br.grid(row=0, column=0)\n    br.bind(\"<Return>\", on_enter)", "tkinter - button Metodo : btn changes to list when pressed": "def cambiar_widget():\n    # Ocultar el bot\u00f3n\n    boton_mas.pack_forget()\n\n    # Crear y mostrar el ListBox\n    lista.pack(pady=10)\n\ndef mostrar_seleccion():\n    # Obtener la selecci\u00f3n del ListBox\n    seleccion = lista.get(tk.ACTIVE)\n\n    # Ocultar el ListBox\n    lista.pack_forget()\n\n    # Crear y mostrar el Label con la selecci\u00f3n\n    label_seleccion.config(text=f\"Seleccionado: {seleccion}\")\n    label_seleccion.pack(pady=10)\n\n# Crear la ventana principal\nventana = tk.Tk()\nventana.title(\"Ejemplo de Cambio de Widgets\")\n\n# Crear el bot\u00f3n de \"+\" y asociarle la funci\u00f3n cambiar_widget\nboton_mas = tk.Button(ventana, text=\"+\", command=cambiar_widget)\nboton_mas.pack(pady=10)\n\n# Crear el ListBox y asociarle algunos elementos\nelementos = [\"Elemento 1\", \"Elemento 2\", \"Elemento 3\"]\nlista = tk.Listbox(ventana, selectmode=tk.SINGLE)\nfor elemento in elementos:\n    lista.insert(tk.END, elemento)\n\n# Crear el Label que mostrar\u00e1 la selecci\u00f3n y ocultarlo inicialmente\nlabel_seleccion = tk.Label(ventana, text=\"\")\nlabel_seleccion.pack_forget()\n\n# Configurar la funci\u00f3n mostrar_seleccion para ser llamada cuando se seleccione un elemento en el ListBox\nlista.bind('<<ListboxSelect>>', lambda event: mostrar_seleccion())", "tkinter - centrar ventana": "\n    # Center the window, and set minsize\n    second_window.update()\n    second_window.minsize(second_window.winfo_width(), second_window.winfo_height())\n    x_cordinate = int((second_window.winfo_screenwidth()/2) - (second_window.winfo_width()/2))\n    y_cordinate = int((second_window.winfo_screenheight()/2) - (second_window.winfo_height()/2))\n    second_window.geometry(\"+{}+{}\".format(x_cordinate, y_cordinate))", "tkinter - como enviar informacion de una ventana a otra": "\nimport tkinter as tk\n\nclass VentanaPrincipal:\n    def __init__(self, root):\n        self.root = root\n        self.label = tk.Label(root, text=\"Haz clic en el bot\u00f3n para abrir la segunda ventana\")\n        self.label.pack()\n\n        self.button = tk.Button(root, text=\"Abrir segunda ventana\", command=self.abrir_segunda_ventana)\n        self.button.pack()\n\n    def abrir_segunda_ventana(self):\n        # Crea una nueva instancia de la ventana secundaria y p\u00e1sale la variable compartida\n        segunda_ventana = SegundaVentana(self.root, self.actualizar_label)\n\n    def actualizar_label(self, nueva_informacion):\n        # Esta funci\u00f3n se llama desde la ventana secundaria\n        self.label.config(text=f\"Informaci\u00f3n recibida: {nueva_informacion}\")\n\nclass SegundaVentana:\n    def __init__(self, root, funcion_retorno):\n        self.root = tk.Toplevel(root)\n        self.funcion_retorno = funcion_retorno\n\n        self.entry = tk.Entry(self.root)\n        self.entry.pack()\n\n        self.button_aceptar = tk.Button(self.root, text=\"Aceptar\", command=self.devolver_informacion)\n        self.button_aceptar.pack()\n\n    def devolver_informacion(self):\n        # Obt\u00e9n la informaci\u00f3n de la Entry y llama a la funci\u00f3n de retorno en la ventana principal\n        informacion = self.entry.get()\n        self.funcion_retorno(informacion)\n        self.root.destroy()  # Cierra la ventana secundaria\n\n# Crea la ventana principal\nroot = tk.Tk()\napp = VentanaPrincipal(root)\nroot.mainloop()\n", "tkinter - diccionario(key:value) key en combobox y values en texto": "# Crear la funci\u00f3n principal\ndef mostrar_dropdown_y_cuadro_texto(diccionario):\n    def mostrar_valor_seleccionado(event):\n        # Obtener la clave seleccionada\n        clave_seleccionada = dropdown_var.get()\n\n        # Obtener el valor correspondiente a la clave\n        valor_correspondiente = diccionario.get(clave_seleccionada, \"Valor no encontrado\")\n\n        # Actualizar el cuadro de texto con el valor correspondiente\n        cuadro_texto.config(state=tk.NORMAL)\n        cuadro_texto.delete(1.0, tk.END)\n        cuadro_texto.insert(tk.END, valor_correspondiente)\n        cuadro_texto.config(state=tk.DISABLED)\n    # Crear la ventana principal\n    ventana = tk.Tk()\n    ventana.title(\"Dropdown y Cuadro de Texto\")\n\n    # Variables Tkinter\n    dropdown_var = tk.StringVar()\n\n    # Crear DropdownMenu con las claves del diccionario\n    dropdown_menu = ttk.Combobox(ventana, textvariable=dropdown_var, values=list(diccionario.keys()),width=150)\n    dropdown_menu.bind(\"<<ComboboxSelected>>\", mostrar_valor_seleccionado)\n    dropdown_menu.pack(pady=10)\n\n    # Crear Cuadro de Texto para mostrar el valor correspondiente\n    cuadro_texto = tk.Text(ventana, height=100, width=300, state=tk.DISABLED)\n    cuadro_texto.pack(pady=10)\n\n    # Iniciar el bucle principal\n    ventana.mainloop()\n\ntipps = {'pregunta 1':'texto 1',\n         'pregunta 2':'texto 2',\n         'pregunta 3':'texto 3',\n         'pregunta 4':'texto 4',}\n# Llamar a la funci\u00f3n principal con el diccionario\nmostrar_dropdown_y_cuadro_texto(tips)\n", "tkinter - example widgets template": "\"\"\"\nExample script for testing the Forest theme\n\nAuthor: rdbende\nLicense: MIT license\nSource: https://github.com/rdbende/ttk-widget-factory\n\"\"\"\n\n\nimport tkinter as tk\nfrom tkinter import ttk\n\nroot = tk.Tk()\nroot.title(\"Forest\")\nroot.option_add(\"*tearOff\", False) # This is always a good idea\n\n# Make the app responsive\nroot.columnconfigure(index=0, weight=1)\nroot.columnconfigure(index=1, weight=1)\nroot.columnconfigure(index=2, weight=1)\nroot.rowconfigure(index=0, weight=1)\nroot.rowconfigure(index=1, weight=1)\nroot.rowconfigure(index=2, weight=1)\n\n# Create a style\nstyle = ttk.Style(root)\n\n# Import the tcl file\nroot.tk.call(\"source\", \"forest-dark.tcl\")\n\n# Set the theme with the theme_use method\nstyle.theme_use(\"forest-dark\")\n\n# Create lists for the Comboboxes\noption_menu_list = [\"\", \"OptionMenu\", \"Option 1\", \"Option 2\"]\ncombo_list = [\"Combobox\", \"Editable item 1\", \"Editable item 2\"]\nreadonly_combo_list = [\"Readonly combobox\", \"Item 1\", \"Item 2\"]\n\n# Create control variables\na = tk.BooleanVar()\nb = tk.BooleanVar(value=True)\nc = tk.BooleanVar()\nd = tk.IntVar(value=2)\ne = tk.StringVar(value=option_menu_list[1])\nf = tk.BooleanVar()\ng = tk.DoubleVar(value=75.0)\nh = tk.BooleanVar()\n\n# Create a Frame for the Checkbuttons\ncheck_frame = ttk.LabelFrame(root, text=\"Checkbuttons\", padding=(20, 10))\ncheck_frame.grid(row=0, column=0, padx=(20, 10), pady=(20, 10), sticky=\"nsew\")\n\n# Checkbuttons\ncheck_1 = ttk.Checkbutton(check_frame, text=\"Unchecked\", variable=a)\ncheck_1.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\ncheck_2 = ttk.Checkbutton(check_frame, text=\"Checked\", variable=b)\ncheck_2.grid(row=1, column=0, padx=5, pady=10, sticky=\"nsew\")\ncheck_3 = ttk.Checkbutton(check_frame, text=\"Third state\", variable=c)\ncheck_3.state([\"alternate\"])\ncheck_3.grid(row=2, column=0, padx=5, pady=10, sticky=\"nsew\")\ncheck_4 = ttk.Checkbutton(check_frame, text=\"Disabled\", state=\"disabled\")\ncheck_4.state([\"disabled !alternate\"])\ncheck_4.grid(row=3, column=0, padx=5, pady=10, sticky=\"nsew\")\n\n# Separator\nseparator = ttk.Separator(root)\nseparator.grid(row=1, column=0, padx=(20, 10), pady=10, sticky=\"ew\")\n\n# Create a Frame for the Radiobuttons\nradio_frame = ttk.LabelFrame(root, text=\"Radiobuttons\", padding=(20, 10))\nradio_frame.grid(row=2, column=0, padx=(20, 10), pady=10, sticky=\"nsew\")\n\n# Radiobuttons\nradio_1 = ttk.Radiobutton(radio_frame, text=\"Deselected\", variable=d, value=1)\nradio_1.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\nradio_2 = ttk.Radiobutton(radio_frame, text=\"Selected\", variable=d, value=2)\nradio_2.grid(row=1, column=0, padx=5, pady=10, sticky=\"nsew\")\nradio_3 = ttk.Radiobutton(radio_frame, text=\"Mixed\")\nradio_3.state([\"alternate\"])\nradio_3.grid(row=2, column=0, padx=5, pady=10, sticky=\"nsew\")\nradio_4 = ttk.Radiobutton(radio_frame, text=\"Disabled\", state=\"disabled\")\nradio_4.grid(row=3, column=0, padx=5, pady=10, sticky=\"nsew\")\n\n# Create a Frame for input widgets\nwidgets_frame = ttk.Frame(root, padding=(0, 0, 0, 10))\nwidgets_frame.grid(row=0, column=1, padx=10, pady=(30, 10), sticky=\"nsew\", rowspan=3)\nwidgets_frame.columnconfigure(index=0, weight=1)\n\n# Entry\nentry = ttk.Entry(widgets_frame)\nentry.insert(0, \"Entry\")\nentry.grid(row=0, column=0, padx=5, pady=(0, 10), sticky=\"ew\")\n\n# Spinbox\nspinbox = ttk.Spinbox(widgets_frame, from_=0, to=100)\nspinbox.insert(0, \"Spinbox\")\nspinbox.grid(row=1, column=0, padx=5, pady=10, sticky=\"ew\")\n\n# Combobox\ncombobox = ttk.Combobox(widgets_frame, values=combo_list)\ncombobox.current(0)\ncombobox.grid(row=2, column=0, padx=5, pady=10,  sticky=\"ew\")\n\n# Read-only combobox\nreadonly_combo = ttk.Combobox(widgets_frame, state=\"readonly\", values=readonly_combo_list)\nreadonly_combo.current(0)\nreadonly_combo.grid(row=3, column=0, padx=5, pady=10,  sticky=\"ew\")\n\n# Menu for the Menubutton\nmenu = tk.Menu(widgets_frame)\nmenu.add_command(label=\"Menu item 1\")\nmenu.add_command(label=\"Menu item 2\")\nmenu.add_separator()\nmenu.add_command(label=\"Menu item 3\")\nmenu.add_command(label=\"Menu item 4\")\n\n# Menubutton\nmenubutton = ttk.Menubutton(widgets_frame, text=\"Menubutton\", menu=menu, direction=\"below\")\nmenubutton.grid(row=4, column=0, padx=5, pady=10, sticky=\"nsew\")\n\n# OptionMenu\noptionmenu = ttk.OptionMenu(widgets_frame, e, *option_menu_list)\noptionmenu.grid(row=5, column=0, padx=5, pady=10, sticky=\"nsew\")\n\n# Button\nbutton = ttk.Button(widgets_frame, text=\"Button\")\nbutton.grid(row=6, column=0, padx=5, pady=10, sticky=\"nsew\")\n\n# Accentbutton\naccentbutton = ttk.Button(widgets_frame, text=\"Accentbutton\", style=\"Accent.TButton\")\naccentbutton.grid(row=7, column=0, padx=5, pady=10, sticky=\"nsew\")\n\n# Togglebutton\nbutton = ttk.Checkbutton(widgets_frame, text=\"Togglebutton\", style=\"ToggleButton\")\nbutton.grid(row=8, column=0, padx=5, pady=10, sticky=\"nsew\")\n\n# Switch\nswitch = ttk.Checkbutton(widgets_frame, text=\"Switch\", style=\"Switch\")\nswitch.grid(row=9, column=0, padx=5, pady=10, sticky=\"nsew\")\n\n# Panedwindow\npaned = ttk.PanedWindow(root)\npaned.grid(row=0, column=2, pady=(25, 5), sticky=\"nsew\", rowspan=3)\n\n# Pane #1\npane_1 = ttk.Frame(paned)\npaned.add(pane_1, weight=1)\n\n# Create a Frame for the Treeview\ntreeFrame = ttk.Frame(pane_1)\ntreeFrame.pack(expand=True, fill=\"both\", padx=5, pady=5)\n\n# Scrollbar\ntreeScroll = ttk.Scrollbar(treeFrame)\ntreeScroll.pack(side=\"right\", fill=\"y\")\n\n# Treeview\ntreeview = ttk.Treeview(treeFrame, selectmode=\"extended\", yscrollcommand=treeScroll.set, columns=(1, 2), height=12)\ntreeview.pack(expand=True, fill=\"both\")\ntreeScroll.config(command=treeview.yview)\n\n# Treeview columns\ntreeview.column(\"#0\", width=120)\ntreeview.column(1, anchor=\"w\", width=120)\ntreeview.column(2, anchor=\"w\", width=120)\n\n# Treeview headings\ntreeview.heading(\"#0\", text=\"Column 1\", anchor=\"center\")\ntreeview.heading(1, text=\"Column 2\", anchor=\"center\")\ntreeview.heading(2, text=\"Column 3\", anchor=\"center\")\n\n# Define treeview data\ntreeview_data = [\n    (\"\", \"end\", 1, \"Parent\", (\"Item 1\", \"Value 1\")),\n    (1, \"end\", 2, \"Child\", (\"Subitem 1.1\", \"Value 1.1\")),\n    (1, \"end\", 3, \"Child\", (\"Subitem 1.2\", \"Value 1.2\")),\n    (1, \"end\", 4, \"Child\", (\"Subitem 1.3\", \"Value 1.3\")),\n    (1, \"end\", 5, \"Child\", (\"Subitem 1.4\", \"Value 1.4\")),\n    (\"\", \"end\", 6, \"Parent\", (\"Item 2\", \"Value 2\")),\n    (6, \"end\", 7, \"Child\", (\"Subitem 2.1\", \"Value 2.1\")),\n    (6, \"end\", 8, \"Sub-parent\", (\"Subitem 2.2\", \"Value 2.2\")),\n    (8, \"end\", 9, \"Child\", (\"Subitem 2.2.1\", \"Value 2.2.1\")),\n    (8, \"end\", 10, \"Child\", (\"Subitem 2.2.2\", \"Value 2.2.2\")),\n    (8, \"end\", 11, \"Child\", (\"Subitem 2.2.3\", \"Value 2.2.3\")),\n    (6, \"end\", 12, \"Child\", (\"Subitem 2.3\", \"Value 2.3\")),\n    (6, \"end\", 13, \"Child\", (\"Subitem 2.4\", \"Value 2.4\")),\n    (\"\", \"end\", 14, \"Parent\", (\"Item 3\", \"Value 3\")),\n    (14, \"end\", 15, \"Child\", (\"Subitem 3.1\", \"Value 3.1\")),\n    (14, \"end\", 16, \"Child\", (\"Subitem 3.2\", \"Value 3.2\")),\n    (14, \"end\", 17, \"Child\", (\"Subitem 3.3\", \"Value 3.3\")),\n    (14, \"end\", 18, \"Child\", (\"Subitem 3.4\", \"Value 3.4\")),\n    (\"\", \"end\", 19, \"Parent\", (\"Item 4\", \"Value 4\")),\n    (19, \"end\", 20, \"Child\", (\"Subitem 4.1\", \"Value 4.1\")),\n    (19, \"end\", 21, \"Sub-parent\", (\"Subitem 4.2\", \"Value 4.2\")),\n    (21, \"end\", 22, \"Child\", (\"Subitem 4.2.1\", \"Value 4.2.1\")),\n    (21, \"end\", 23, \"Child\", (\"Subitem 4.2.2\", \"Value 4.2.2\")),\n    (21, \"end\", 24, \"Child\", (\"Subitem 4.2.3\", \"Value 4.2.3\")),\n    (19, \"end\", 25, \"Child\", (\"Subitem 4.3\", \"Value 4.3\"))\n    ]\n\n# Insert treeview data\nfor item in treeview_data:\n    treeview.insert(parent=item[0], index=item[1], iid=item[2], text=item[3], values=item[4])\n    if item[0] == \"\" or item[2] in (8, 12):\n        treeview.item(item[2], open=True) # Open parents\n\n# Select and scroll\ntreeview.selection_set(10)\ntreeview.see(7)\n\n# Pane #2\npane_2 = ttk.Frame(paned)\npaned.add(pane_2, weight=3)\n\n# Notebook\nnotebook = ttk.Notebook(pane_2)\n\n# Tab #1\ntab_1 = ttk.Frame(notebook)\ntab_1.columnconfigure(index=0, weight=1)\ntab_1.columnconfigure(index=1, weight=1)\ntab_1.rowconfigure(index=0, weight=1)\ntab_1.rowconfigure(index=1, weight=1)\nnotebook.add(tab_1, text=\"Tab 1\")\n\n# Scale\nscale = ttk.Scale(tab_1, from_=100, to=0, variable=g, command=lambda event: g.set(scale.get()))\nscale.grid(row=0, column=0, padx=(20, 10), pady=(20, 0), sticky=\"ew\")\n\n# Progressbar\nprogress = ttk.Progressbar(tab_1, value=0, variable=g, mode=\"determinate\")\nprogress.grid(row=0, column=1, padx=(10, 20), pady=(20, 0), sticky=\"ew\")\n\n# Label\nlabel = ttk.Label(tab_1, text=\"Forest ttk theme\", justify=\"center\")\nlabel.grid(row=1, column=0, pady=10, columnspan=2)\n\n# Tab #2\ntab_2 = ttk.Frame(notebook)\nnotebook.add(tab_2, text=\"Tab 2\")\n\n# Tab #3\ntab_3 = ttk.Frame(notebook)\nnotebook.add(tab_3, text=\"Tab 3\")\n\nnotebook.pack(expand=True, fill=\"both\", padx=5, pady=5)\n\n# Sizegrip\nsizegrip = ttk.Sizegrip(root)\nsizegrip.grid(row=100, column=100, padx=(0, 5), pady=(0, 5))\n\n# Center the window, and set minsize\nroot.update()\nroot.minsize(root.winfo_width(), root.winfo_height())\nx_cordinate = int((root.winfo_screenwidth()/2) - (root.winfo_width()/2))\ny_cordinate = int((root.winfo_screenheight()/2) - (root.winfo_height()/2))\nroot.geometry(\"+{}+{}\".format(x_cordinate, y_cordinate))\n\n# Start the main loop\nroot.mainloop()\n", "tkinter - grafica Matplotlib": "import tkinter as tk\nfrom tkinter import ttk\nfrom matplotlib.figure import Figure\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n\ndef graficar():\n    # Crear datos de ejemplo\n    x = [1, 2, 3, 4, 5]\n    y = [2, 4, 1, 7, 5]\n\n    subgrafico.plot(x, y, label='Datos de ejemplo')\n    lienzo.draw()\n\n\n# Crear la ventana principal\nventana = tk.Tk()\nventana.title(\"Gr\u00e1fico en Tkinter\")\n\n# Bot\u00f3n para graficar\nboton_graficar = ttk.Button(ventana, text=\"Graficar\", command=graficar)\nboton_graficar.pack(pady=10)\n\n# Crear la figura de Matplotlib\nfigura = Figure(figsize=(5, 4), dpi=100)\nsubgrafico = figura.add_subplot(1, 1, 1)\n\nsubgrafico.set_title('Gr\u00e1fico de Ejemplo')\nsubgrafico.set_xlabel('Eje X')\nsubgrafico.set_ylabel('Eje Y')\nsubgrafico.legend(\"Soy una leyenda\")\n\n# Crear el lienzo de Tkinter\nlienzo = FigureCanvasTkAgg(figura, master=ventana)\n\n\n# Empaquetar el lienzo en la ventana\nlienzo.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)\n\n# Iniciar el bucle principal\nventana.mainloop()\n", "tkinter - inhabilitar widgets": "def disable_all():# Func-20\n        # Blocking widgets\n        mallaopcion1.config(state=tk.DISABLED)\n        chopcion1.config(state=tk.DISABLED)\n        chopcion2.config(state=tk.DISABLED)\n        chopcion3.config(state=tk.DISABLED)    \n        chopcion4.config(state=tk.DISABLED)\n        name_prod_entry.config(state=tk.DISABLED)\n        no_prod_entry.config(state=tk.DISABLED)\n        picto_prod_entry.config(state=tk.DISABLED)\n        etiq_prod_entry.config(state=tk.DISABLED)\n        mues_prod_entry.config(state=tk.DISABLED)\n        caracmalla_entry.config(state=tk.DISABLED)", "tkinter - list, metodo : autocompletar": "def autocompletar(event):\n    entrada_texto = entry.get().lower()\n    sugerencias = [item for item in lista_palabras if entrada_texto in item.lower()]\n\n    mostrar_sugerencias(sugerencias)\n\ndef mostrar_sugerencias(sugerencias):\n    if sugerencias:\n        lista_sugerencias.delete(0, tk.END)\n        for sugerencia in sugerencias:\n            lista_sugerencias.insert(tk.END, sugerencia)\n        lista_sugerencias.place(x=entry.winfo_x(), y=entry.winfo_y() + entry.winfo_height())\n    else:\n        lista_sugerencias.place_forget()\n\ndef seleccionar_sugerencia(event):\n    entry.delete(0, tk.END)\n    entry.insert(0, lista_sugerencias.get(tk.ACTIVE))\n    lista_sugerencias.place_forget()\n\n# Crear la ventana principal\nventana = tk.Tk()\nventana.title(\"Autocompletado con Entry\")\n\n# Lista de palabras para autocompletar\nlista_palabras = [\"manzana\", \"banana\", \"kiwi\", \"mango\", \"pera\", \"uva\", \"sand\u00eda\", \"papaya\"]\n\n# Crear el Entry\nentry = tk.Entry(ventana)\nentry.pack(pady=10)\n\n# Crear la lista desplegable de sugerencias\nlista_sugerencias = tk.Listbox(ventana)\nlista_sugerencias.place_forget()\n\n# Asociar eventos\nentry.bind('<KeyRelease>', autocompletar)\nlista_sugerencias.bind('<ButtonRelease-1>', seleccionar_sugerencia)", "tkinter - sizegrip": "\n    # Sizegrip\n    sizegrip = ttk.Sizegrip(second_window)\n    sizegrip.grid(row=100, column=100, padx=(0, 5), pady=(0, 5))", "tkinter - transferir informaci\u00f3n entre ventanas": "\nimport tkinter as tk\n\nclass VentanaPrincipal:\n    def __init__(self, root):\n        self.root = root\n        self.label = tk.Label(root, text=\"Haz clic en el bot\u00f3n para abrir la segunda ventana\")\n        self.label.pack()\n\n        self.button = tk.Button(root, text=\"Abrir segunda ventana\", command=self.abrir_segunda_ventana)\n        self.button.pack()\n\n    def abrir_segunda_ventana(self):\n        # Crea una nueva instancia de la ventana secundaria y p\u00e1sale la variable compartida\n        segunda_ventana = SegundaVentana(self.root, self.actualizar_label)\n\n    def actualizar_label(self, nueva_informacion):\n        # Esta funci\u00f3n se llama desde la ventana secundaria\n        self.label.config(text=f\"Informaci\u00f3n recibida: {nueva_informacion}\")\n\nclass SegundaVentana:\n    def __init__(self, root, funcion_retorno):\n        self.root = tk.Toplevel(root)\n        self.funcion_retorno = funcion_retorno\n\n        self.entry = tk.Entry(self.root)\n        self.entry.pack()\n\n        self.button_aceptar = tk.Button(self.root, text=\"Aceptar\", command=self.devolver_informacion)\n        self.button_aceptar.pack()\n\n    def devolver_informacion(self):\n        # Obt\u00e9n la informaci\u00f3n de la Entry y llama a la funci\u00f3n de retorno en la ventana principal\n        informacion = self.entry.get()\n        self.funcion_retorno(informacion)\n        self.root.destroy()  # Cierra la ventana secundaria\n\n# Crea la ventana principal\nroot = tk.Tk()\napp = VentanaPrincipal(root)\nroot.mainloop()\n\n", "tkinter - treeview": "\n    # -------------------------------------------------------------------------- TREEVIEW -------------------------------------------------\n    # Create a Frame for the Treeview\n    treeFrame = ttk.Frame(data_n_tree)\n    treeFrame.grid(row=0, column=1)\n\n    # Scrollbar\n    treeScroll = ttk.Scrollbar(treeFrame)\n    treeScroll.pack(side=\"right\", fill=\"y\")\n\n    # Treeview\n    treeview = ttk.Treeview(treeFrame, selectmode=\"extended\", yscrollcommand=treeScroll.set, columns=(1, 2, 3, 4), height=12)\n    treeview.pack(expand=True, fill=\"both\")\n    treeScroll.config(command=treeview.yview)\n\n    # Treeview columns\n    treeview.column(\"#0\", width=100)\n    treeview.column(1, anchor=\"w\", width=100)\n    treeview.column(2, anchor=\"w\", width=100)\n    treeview.column(3, anchor=\"w\", width=100)\n    treeview.column(4, anchor=\"w\", width=100)\n\n    # Treeview headings\n    treeview.heading(\"#0\", text=\"Nombre\", anchor=\"center\")\n    treeview.heading(1, text=\"Descripcion\", anchor=\"center\")\n    treeview.heading(2, text=\"Pictogramas\", anchor=\"center\")\n    treeview.heading(3, text=\"Indicacion\", anchor=\"center\")\n    treeview.heading(4, text=\"revision\", anchor=\"center\")\n", "tkinter - treeview, method : actualizar treeview desde archivo json": "\ndef actualizar():\n    def mostrar_dicc(tree, diccionario, parent=\"\"):# args: (treeview object, dict, (optional) parent)\n        for key, value in diccionario.items():\n            if isinstance(value, dict):\n                # Si el valor es un diccionario, recurrir de forma recursiva\n                nuevo_parent = tree.insert(parent, 'end', text=str(key), open=True)\n        ##                print(f' Nuevo parent es : {nuevo_parent}')\n                mostrar_dicc(tree, value, parent=nuevo_parent)\n            else:\n                # Si el valor no es un diccionario, agregarlo como un elemento\n                tree.insert(parent, 'end', text=str(key), values=(str(value)))\n    with open('datos.json', 'r') as archivo:# extraer la info previa\n        treeview_datan.clear()\n        treeview_datan.update(json.load(archivo))\n    for item in treeview.get_children():# eliminar todos los elementos del treeview\n        treeview.delete(item)\n    mostrar_dicc(treeview,treeview_datan)\n\n", "tkinter - treeview, method: dict to treeview": "def mostrar_dicc(tree, diccionario, parent=\"\"):# args: (treeview object, dict, (optional) parent)\n        for key, value in diccionario.items():\n            if isinstance(value, dict):\n                # Si el valor es un diccionario, recurrir de forma recursiva\n                nuevo_parent = tree.insert(parent, 'end', text=str(key), open=True)\n##                print(f' Nuevo parent es : {nuevo_parent}')\n                mostrar_dicc(tree, value, parent=nuevo_parent)\n            else:\n                # Si el valor no es un diccionario, agregarlo como un elemento\n                tree.insert(parent, 'end', text=str(key), values=(str(value)))", "openpyxl - abrir/crear nuevo libro de excel": "import openpyxl\nimport tkinter as tk\nfrom tkinter import messagebox\n\ndef agregar_a_excel():\n    # Obtener la informaci\u00f3n del Entry\n    nombre = entry_nombre.get()\n    cantidad = entry_cantidad.get()\n\n    # Verificar que se hayan proporcionado ambos valores\n    if not nombre or not cantidad:\n        messagebox.showwarning(\"Advertencia\", \"Por favor, completa todos los campos.\")\n        return\n\n    # Agregar la informaci\u00f3n a la hoja de c\u00e1lculo\n    hoja = libro.active\n    hoja.append([nombre, cantidad])\n\n    # Guardar los cambios en el archivo Excel\n    libro.save(\"PEDIDITO_DATABASE.xlsx\")\n\n    # Limpiar los Entry despu\u00e9s de agregar la informaci\u00f3n\n    entry_nombre.delete(0, tk.END)\n    entry_cantidad.delete(0, tk.END)\n\n    messagebox.showinfo(\"\u00c9xito\", \"Informaci\u00f3n agregada al archivo Excel.\")\n\n# Crear un libro de trabajo de Excel\nlibro = openpyxl.Workbook()\n\n# Crear la hoja de c\u00e1lculo\nhoja = libro.active\nhoja.title = \"Pedidos\"\n\n# Crear la ventana principal\nventana = tk.Tk()\nventana.title(\"Agregar a PEDIDITO_DATABASE\")\n\n# Crear etiquetas y Entry para ingresar informaci\u00f3n\nlabel_nombre = tk.Label(ventana, text=\"Nombre:\")\nlabel_nombre.grid(row=0, column=0, padx=10, pady=10)\nentry_nombre = tk.Entry(ventana)\nentry_nombre.grid(row=0, column=1, padx=10, pady=10)\n\nlabel_cantidad = tk.Label(ventana, text=\"Cantidad:\")\nlabel_cantidad.grid(row=1, column=0, padx=10, pady=10)\nentry_cantidad = tk.Entry(ventana)\nentry_cantidad.grid(row=1, column=1, padx=10, pady=10)\n\n# Bot\u00f3n para agregar a la hoja de c\u00e1lculo\nboton_agregar = tk.Button(ventana, text=\"Agregar a Excel\", command=agregar_a_excel)\nboton_agregar.grid(row=2, column=0, columnspan=2, pady=10)\n\n# Iniciar el bucle de eventos\nventana.mainloop()\n", "str - str to dict .split()": "def procesar_lista_compras(cadena_lista):\n    lista_items = cadena_lista.split(', ')\n    resultado = {}\n\n    for item in lista_items:\n        partes = item.split(' ')\n        if len(partes) >= 2:\n            cantidad = int(partes[0])\n            producto = ' '.join(partes[1:])\n            resultado[producto] = cantidad\n\n    return resultado\n\n# Ejemplo de uso\ncadena_lista_compras = \"20 cocas, 1 sabritas, 1 L Leche, 1 caja de cigarros\"\ndiccionario_compras = procesar_lista_compras(cadena_lista_compras)\nprint(diccionario_compras)"}